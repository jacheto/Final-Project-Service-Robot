// Generated by gencpp from file roboserv_description/AppMsg.msg
// DO NOT EDIT!


#ifndef ROBOSERV_DESCRIPTION_MESSAGE_APPMSG_H
#define ROBOSERV_DESCRIPTION_MESSAGE_APPMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboserv_description
{
template <class ContainerAllocator>
struct AppMsg_
{
  typedef AppMsg_<ContainerAllocator> Type;

  AppMsg_()
    : operation_mode(0)
    , navigation_mode(0)
    , button_up(false)
    , button_down(false)
    , button_left(false)
    , button_right(false)
    , button_up_left(false)
    , button_up_right(false)
    , button_down_left(false)
    , button_down_right(false)
    , robot_pos_x(0.0)
    , robot_pos_y(0.0)  {
    }
  AppMsg_(const ContainerAllocator& _alloc)
    : operation_mode(0)
    , navigation_mode(0)
    , button_up(false)
    , button_down(false)
    , button_left(false)
    , button_right(false)
    , button_up_left(false)
    , button_up_right(false)
    , button_down_left(false)
    , button_down_right(false)
    , robot_pos_x(0.0)
    , robot_pos_y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _operation_mode_type;
  _operation_mode_type operation_mode;

   typedef uint8_t _navigation_mode_type;
  _navigation_mode_type navigation_mode;

   typedef uint8_t _button_up_type;
  _button_up_type button_up;

   typedef uint8_t _button_down_type;
  _button_down_type button_down;

   typedef uint8_t _button_left_type;
  _button_left_type button_left;

   typedef uint8_t _button_right_type;
  _button_right_type button_right;

   typedef uint8_t _button_up_left_type;
  _button_up_left_type button_up_left;

   typedef uint8_t _button_up_right_type;
  _button_up_right_type button_up_right;

   typedef uint8_t _button_down_left_type;
  _button_down_left_type button_down_left;

   typedef uint8_t _button_down_right_type;
  _button_down_right_type button_down_right;

   typedef float _robot_pos_x_type;
  _robot_pos_x_type robot_pos_x;

   typedef float _robot_pos_y_type;
  _robot_pos_y_type robot_pos_y;





  typedef boost::shared_ptr< ::roboserv_description::AppMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboserv_description::AppMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AppMsg_

typedef ::roboserv_description::AppMsg_<std::allocator<void> > AppMsg;

typedef boost::shared_ptr< ::roboserv_description::AppMsg > AppMsgPtr;
typedef boost::shared_ptr< ::roboserv_description::AppMsg const> AppMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboserv_description::AppMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboserv_description::AppMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboserv_description

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roboserv_description': ['/home/felipe/roboserv_ws/src/roboserv_description/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboserv_description::AppMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboserv_description::AppMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboserv_description::AppMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboserv_description::AppMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboserv_description::AppMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboserv_description::AppMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboserv_description::AppMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02779d669f715c0c7649d0bb288210ee";
  }

  static const char* value(const ::roboserv_description::AppMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02779d669f715c0cULL;
  static const uint64_t static_value2 = 0x7649d0bb288210eeULL;
};

template<class ContainerAllocator>
struct DataType< ::roboserv_description::AppMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboserv_description/AppMsg";
  }

  static const char* value(const ::roboserv_description::AppMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboserv_description::AppMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 operation_mode\n\
uint8 navigation_mode\n\
bool button_up\n\
bool button_down\n\
bool button_left\n\
bool button_right\n\
bool button_up_left\n\
bool button_up_right\n\
bool button_down_left\n\
bool button_down_right\n\
float32 robot_pos_x\n\
float32 robot_pos_y\n\
";
  }

  static const char* value(const ::roboserv_description::AppMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboserv_description::AppMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation_mode);
      stream.next(m.navigation_mode);
      stream.next(m.button_up);
      stream.next(m.button_down);
      stream.next(m.button_left);
      stream.next(m.button_right);
      stream.next(m.button_up_left);
      stream.next(m.button_up_right);
      stream.next(m.button_down_left);
      stream.next(m.button_down_right);
      stream.next(m.robot_pos_x);
      stream.next(m.robot_pos_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AppMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboserv_description::AppMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboserv_description::AppMsg_<ContainerAllocator>& v)
  {
    s << indent << "operation_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.operation_mode);
    s << indent << "navigation_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navigation_mode);
    s << indent << "button_up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_up);
    s << indent << "button_down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_down);
    s << indent << "button_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_left);
    s << indent << "button_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_right);
    s << indent << "button_up_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_up_left);
    s << indent << "button_up_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_up_right);
    s << indent << "button_down_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_down_left);
    s << indent << "button_down_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_down_right);
    s << indent << "robot_pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.robot_pos_x);
    s << indent << "robot_pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.robot_pos_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOSERV_DESCRIPTION_MESSAGE_APPMSG_H
