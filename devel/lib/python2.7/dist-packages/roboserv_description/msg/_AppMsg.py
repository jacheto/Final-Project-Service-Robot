# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roboserv_description/AppMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AppMsg(genpy.Message):
  _md5sum = "02779d669f715c0c7649d0bb288210ee"
  _type = "roboserv_description/AppMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 operation_mode
uint8 navigation_mode
bool button_up
bool button_down
bool button_left
bool button_right
bool button_up_left
bool button_up_right
bool button_down_left
bool button_down_right
float32 robot_pos_x
float32 robot_pos_y
"""
  __slots__ = ['operation_mode','navigation_mode','button_up','button_down','button_left','button_right','button_up_left','button_up_right','button_down_left','button_down_right','robot_pos_x','robot_pos_y']
  _slot_types = ['uint8','uint8','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       operation_mode,navigation_mode,button_up,button_down,button_left,button_right,button_up_left,button_up_right,button_down_left,button_down_right,robot_pos_x,robot_pos_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AppMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.operation_mode is None:
        self.operation_mode = 0
      if self.navigation_mode is None:
        self.navigation_mode = 0
      if self.button_up is None:
        self.button_up = False
      if self.button_down is None:
        self.button_down = False
      if self.button_left is None:
        self.button_left = False
      if self.button_right is None:
        self.button_right = False
      if self.button_up_left is None:
        self.button_up_left = False
      if self.button_up_right is None:
        self.button_up_right = False
      if self.button_down_left is None:
        self.button_down_left = False
      if self.button_down_right is None:
        self.button_down_right = False
      if self.robot_pos_x is None:
        self.robot_pos_x = 0.
      if self.robot_pos_y is None:
        self.robot_pos_y = 0.
    else:
      self.operation_mode = 0
      self.navigation_mode = 0
      self.button_up = False
      self.button_down = False
      self.button_left = False
      self.button_right = False
      self.button_up_left = False
      self.button_up_right = False
      self.button_down_left = False
      self.button_down_right = False
      self.robot_pos_x = 0.
      self.robot_pos_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B2f().pack(_x.operation_mode, _x.navigation_mode, _x.button_up, _x.button_down, _x.button_left, _x.button_right, _x.button_up_left, _x.button_up_right, _x.button_down_left, _x.button_down_right, _x.robot_pos_x, _x.robot_pos_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.operation_mode, _x.navigation_mode, _x.button_up, _x.button_down, _x.button_left, _x.button_right, _x.button_up_left, _x.button_up_right, _x.button_down_left, _x.button_down_right, _x.robot_pos_x, _x.robot_pos_y,) = _get_struct_10B2f().unpack(str[start:end])
      self.button_up = bool(self.button_up)
      self.button_down = bool(self.button_down)
      self.button_left = bool(self.button_left)
      self.button_right = bool(self.button_right)
      self.button_up_left = bool(self.button_up_left)
      self.button_up_right = bool(self.button_up_right)
      self.button_down_left = bool(self.button_down_left)
      self.button_down_right = bool(self.button_down_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B2f().pack(_x.operation_mode, _x.navigation_mode, _x.button_up, _x.button_down, _x.button_left, _x.button_right, _x.button_up_left, _x.button_up_right, _x.button_down_left, _x.button_down_right, _x.robot_pos_x, _x.robot_pos_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.operation_mode, _x.navigation_mode, _x.button_up, _x.button_down, _x.button_left, _x.button_right, _x.button_up_left, _x.button_up_right, _x.button_down_left, _x.button_down_right, _x.robot_pos_x, _x.robot_pos_y,) = _get_struct_10B2f().unpack(str[start:end])
      self.button_up = bool(self.button_up)
      self.button_down = bool(self.button_down)
      self.button_left = bool(self.button_left)
      self.button_right = bool(self.button_right)
      self.button_up_left = bool(self.button_up_left)
      self.button_up_right = bool(self.button_up_right)
      self.button_down_left = bool(self.button_down_left)
      self.button_down_right = bool(self.button_down_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B2f = None
def _get_struct_10B2f():
    global _struct_10B2f
    if _struct_10B2f is None:
        _struct_10B2f = struct.Struct("<10B2f")
    return _struct_10B2f
