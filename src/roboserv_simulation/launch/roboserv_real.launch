<?xml version="1.0" encoding="UTF-8"?>
<launch>
	
	<!-- Porta do Arduino -->
	<arg name="ard_port" default="0"/>
	
	<!-- Definicao do robo -->
	<param name="robot/name" value="roboserv_real"/>
	<param name="robot/type" value="roboserv"/>
	<param name="robot_description" command="$(find xacro)/xacro.py '$(find roboserv_description)/urdf/roboserv.xacro' using_simulation:=0"/>
	<param name="use_sim_time" value="false"/>


	<!-- Conexao com arduino -->
	<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
		<param name="port" value="/dev/ttyUSB$(arg ard_port)"/>
		<param name="baud" value="57600"/>
	</node>
	
	<!-- Joints -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<param name="use_gui" value="false"/>
	</node>-->

	<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
		<param name="publish_frequency" type="double" value="5.0" />
	</node>

	<!-- Tratamento dos sensores -->
	<node name="tratamento_sensores" pkg="roboserv_simulation" type="tratamento_sensores.py"/>

	<!-- Tratamento do laserScan 
	<node name="tratamento_scan" pkg="roboserv_simulation" type="tratamento_scan.py"/>
	-->
	<!-- Abrir zed -->
    <node name="zed_node" pkg="zed_wrapper" type="zed_wrapper_node" output="screen" required="true">
        <rosparam file="$(find zed_wrapper)/params/common.yaml" command="load" />
        <rosparam file="$(find zed_wrapper)/params/zed.yaml" command="load" />
    </node>

	<!-- Abrir Rviz -->
	<node name="rviz" pkg="rviz" type="rviz"/>
	
	<!-- Transforma a nuvem de pontos em laserscan -->
	 <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" >
        <remap from="image" to="/zed_node/depth/depth_registered" />
		<remap from="camera_info" to="/zed_node/depth/camera_info" />
        <param name="scan_height" value="300"/>
        <param name="range_min" value="0.5"/>
        <param name="range_max" value="20"/>
        <param name="output_frame_id" value="zed_camera_center"/>
    </node>
	
	<!-- Transforma a nuvem de pontos em laserscan 
	<node name="pointcloud_to_laserscan_node" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" output="screen" >
		<remap from="cloud_in" to="/zed_node/point_cloud/cloud_registered"/>
		<param name="target_frame"		value="base_link"/>
		<param name="range_min"         value="0.05"/>
		<param name="range_max"         value="15.0"/>
		<param name="min_height"        value="0.7"/>
		<param name="max_height"        value="0.9"/>
		<remap from="scan"        		to="scan_input"/>
	</node>-->
	
	<!-- Multiplexador de velocidade -->
	<node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
	<node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
		args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
		<param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
	</node>
  
	<!-- Limita a velocidade atraves dos sensores -->
	<node pkg="roboserv_simulation" type="gate_control.py" name="gate_control" output="screen">
	</node>
	
	<!-- SLAM -->
	<node name="gmapping" pkg="gmapping" type="slam_gmapping" output="screen" >
		<param name="base_frame" value="base_link"/>
		<param name="agularUpdate" value="0.1"/>
		<param name="linearUpdate" value="0.1"/>
		<param name="lskip" value="10"/>
		<param name="xmax" value="10"/>
		<param name="xmin" value="-10"/>
		<param name="ymax" value="10"/>
		<param name="ymin" value="-10"/>
		<param name="minimumScore" value="50"/>
	</node>
	
	<!-- Path planning -->
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<rosparam file="$(find roboserv_simulation)/config/move_base/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find roboserv_simulation)/config/move_base/costmap_common_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find roboserv_simulation)/config/move_base/local_costmap_params.yaml" command="load" />
		<rosparam file="$(find roboserv_simulation)/config/move_base/global_costmap_params.yaml" command="load" />
		<rosparam file="$(find roboserv_simulation)/config/move_base/base_local_planner_params.yaml" command="load" />
		
		<param name="move_base/DWAPlannerROS/yaw_goal_tolerance" value="0.8"/>
		<param name="move_base/DWAPlannerROS/xy_goal_tolerance" value="0.5"/>
		<param name="move_base/DWAPlannerROS/latch_xy_goal_tolerance" value="true"/>
		<param name="recovery_behaviors" value="[{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, 
												{name: rotate_recovery, 	type: rotate_recovery/RotateRecovery}]"/>
		<param name="controller_patience" value="5"/>
		<param name="clearing_rotation_allowed" value="true"/>
		<param name="oscillation_timeout" value="5"/>
		<param name="planner_frequency" value="0.4"/>
		
		<remap from="cmd_vel" to="cmd_vel_mux/input/navi"/>
	</node>
  
	<!-- Auxiliar para o path planning -->
	<node pkg="roboserv_simulation" type="finish_goal_aux.py" name="finish_goal_aux" output="screen">
		<param name="tolerance_dist" value="0.4"/>
		<param name="tolerance_ang" value="0.2"/>
		<param name="ang_vel" value="0.75"/>
	</node>
  
</launch>
