<?xml version="1.0" encoding="UTF-8"?>
<launch>
	
	<!-- Porta do Arduino -->
	<arg name="ard_port" default="0" />
	<arg name="maps_dir" default="/mnt/HD/ROS_maps/roboserv" />
	<arg name="mapping" default="true" />
	<arg name="map_name" default="default" />
	<arg name="open_rviz" default="true" />
	
	<!-- Definicao do robo -->
	<param name="robot/name" value="roboserv_real"/>
	<param name="robot/type" value="roboserv"/>
	<param name="robot_description" command="$(find xacro)/xacro.py '$(find roboserv_description)/urdf/roboserv.xacro' using_simulation:=0"/>
	<param name="use_sim_time" value="false"/>

	<!-- Transforma o mapa em uma imagem para enviar para o app -->
	<node name="tratamento_mapa" pkg="roboserv_simulation" type="tratamento_mapa.py" output="screen">
		<param name="directory" value="$(arg maps_dir)/$(arg map_name)"/>
	</node>

	<!-- Salva a tela do RVIZ para enviar para o PC-->
	<node name="salvar_rviz" pkg="roboserv_simulation" type="salvar_rviz.py">
		<param name="directory" value="$(arg maps_dir)"/>
	</node>

	<!-- Prepara o ambiente -->
	<node name="prepare_env" pkg="roboserv_simulation" type="prepare_env.py">
		<param name="directory" value="$(arg maps_dir)/$(arg map_name)"/>
	</node>

	<!-- Publica os joints -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<param name="use_gui" value="false"/>
	</node>

	<!-- Publica os joints do robo -->
	<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
		<param name="publish_frequency" type="double" value="5.0" />
	</node>

	<!-- Tratamento dos sensores -->
	<node name="tratamento_sensores" pkg="roboserv_simulation" type="tratamento_sensores.py"/>

	<!-- Tratamento do scanner, retira pontos na borda que podem bugar a profundidade -->
	<node name="tratamento_scan" pkg="roboserv_simulation" type="tratamento_scan.py">
		<param name="hidden_points" value="50" />
	</node>
	
	<!-- Faz a conexao com o Arduino -->
	<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
		<param name="port" value="/dev/ttyUSB$(arg ard_port)"/>
		<param name="baud" value="57600"/>
	</node>
	
	<!-- Abrir zed -->
    <node name="zed_node" pkg="zed_wrapper" type="zed_wrapper_node" output="screen" required="true">
        <rosparam file="$(find roboserv_simulation)/config/zed/common.yaml" command="load" />
        <rosparam file="$(find roboserv_simulation)/config/zed/zed.yaml" command="load" />
    </node>

	<!-- Abrir Rviz -->
	<group if="$(arg open_rviz)">
		<node name="rviz" pkg="rviz" type="rviz" args="-d $(find roboserv_simulation)/config/rviz/rviz_config.rviz"/>
	</group>

	<!-- Transforma a nuvem de pontos em laserscan -->
	 <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan" >
        <remap from="image" to="/zed_node/depth/depth_registered" />
		<remap from="camera_info" to="/zed_node/depth/camera_info" />
        <param name="scan_height" value="300"/>
        <param name="range_min" value="0.3"/>
        <param name="range_max" value="20"/>
        <param name="output_frame_id" value="base_link"/>
        <remap from="scan" to="scan_input"/>
    </node>

	<!-- Multiplexador de velocidade -->
	<node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"/>
	<node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
		args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
		<param name="yaml_cfg_file" value="$(find roboserv_simulation)/config/mux/mux.yaml" />
	</node>
  
	<!-- Limita a velocidade atraves dos sensores -->
	<node pkg="roboserv_simulation" type="gate_control.py" name="gate_control" output="screen"/>

	<!-- Carrega o mapa do arquivo gerado no topico map -->
	<group unless="$(arg mapping)">
		<node name="planner_map_server" pkg="map_server" type="map_server" args="$(arg maps_dir)/$(arg map_name)/map_img.yaml"/>
	</group>

	<group if="$(arg mapping)">
		<!-- SLAM: gera o mapa do ambiente -->
		<node name="gmapping" pkg="gmapping" type="slam_gmapping" output="screen" >
			<param name="map_frame" value="local_map"/>
			<param name="base_frame" value="base_link"/>
			<param name="agularUpdate" value="0.1"/>
			<param name="linearUpdate" value="0.1"/>
			<param name="lskip" value="10"/>
			<param name="xmax" value="10"/>
			<param name="xmin" value="-10"/>
			<param name="ymax" value="10"/>
			<param name="ymin" value="-10"/>
			<param name="minimumScore" value="50"/>
			<!--param name="transform_publish_period" value="0"/-->
		</node>
		
		<!-- Salva o mapa em um arquivo continuamente -->
		<node name="save_map" pkg="roboserv_simulation" type="save_map.py">
			<param name="directory" value="$(arg maps_dir)/$(arg map_name)"/>
		</node>
	</group>

	<!-- rtabmap: Realiza o mapeamento e relocaliza o robo ao resetar -->
	<include file="$(find rtabmap_ros)/launch/rtabmap.launch">
		<arg name="rtabmapviz"					value="false"  />
		<arg name="rviz"						value="false"  /> 
		<arg name="stereo"          			default="false"/>
		<arg unless="$(arg mapping)" 			name="localization"        value="true"/>
		<arg 	 if="$(arg mapping)" 			name="localization"        value="false"/>

		<arg name="frame_id"					value="zed_camera_center" />
		<arg name="map_frame_id"				value="map"/>
		<arg name="odom_frame_id"				value="local_map"/>
		<arg name="database_path"       		value="$(arg maps_dir)/$(arg map_name)/map_info.db"/>
		
		<arg name="rgb_topic"					value="/zed_node/rgb/image_rect_color" />
		<arg name="depth_topic"					value="/zed_node/depth/depth_registered" />
		<arg name="camera_info_topic"			value="/zed_node/rgb/camera_info" />
		<arg name="depth_camera_info_topic"		value="/zed_node/depth/camera_info" />
		
		<arg name="visual_odometry"		value="false"/>
	</include>

	<arg name="no_static_map" value="true"/>

	<!-- Path planning -->
	<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
		<param name="base_global_planner" value="navfn/NavfnROS"/>
		<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/>

		<rosparam file="$(find roboserv_simulation)/config/move_base/planner.yaml" command="load"/>
		<rosparam file="$(find roboserv_simulation)/config/move_base/costmap_common.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find roboserv_simulation)/config/move_base/costmap_common.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find roboserv_simulation)/config/move_base/costmap_local.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find roboserv_simulation)/config/move_base/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
		<rosparam file="$(find roboserv_simulation)/config/move_base/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>

		<param name="local_costmap/width" value="10.0"/>
		<param name="local_costmap/height" value="10.0"/>
		<param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
		<param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>
		
		<remap from="cmd_vel" to="cmd_vel_navi"/>
	</node>
  
	<!-- Auxiliar para o path planning -->
	<node pkg="roboserv_simulation" type="finish_goal_aux.py" name="finish_goal_aux" output="screen">
		<param name="tolerance_dist" value="0.4"/>
		<param name="tolerance_ang" value="0.3"/>
		<param name="ang_vel" value="0.8"/>
	</node>

	<!-- Navegacao Autonoma 
	<node pkg="explore_lite" type="explore" respawn="false" name="explore" output="screen">
		<param name="robot_base_frame" value="base_link"/>
		<param name="costmap_topic" value="map"/>
		<param name="costmap_updates_topic" value="map_updates"/>
		<param name="visualize" value="true"/>
		<param name="planner_frequency" value="0.5"/>
		<param name="progress_timeout" value="10.0"/>
		<param name="potential_scale" value="3.0"/>
		<param name="gain_scale" value="1.0"/>
		<param name="transform_tolerance" value="0.4"/>
		<param name="min_frontier_size" value="1"/>
	</node>-->
  

</launch>
